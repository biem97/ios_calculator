{"version":3,"sources":["components/AppButton.js","components/AppDisplay.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["AppButton","props","Button","block","onClick","value","variant","type","AppDisplay","display","Main","handleClick","ev","target","setState","state","ac","slice","concat","evaluate","allClear","equal","string","replace","expression","x","toString","Container","className","Row","this","Col","xs","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.290cba60.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nexport default function AppButton(props) {\r\n    \r\n    return(\r\n      <Button block onClick={props.onClick} value={props.value} variant={props.type}>\r\n        {props.value}\r\n      </Button>\r\n    );\r\n\r\n}","import React from \"react\";\r\n\r\nexport default function AppDisplay(props) {\r\n  return (\r\n    <>\r\n        {props.display}\r\n    </>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { evaluate } from \"mathjs\";\r\nimport AppButton from \"./AppButton\";\r\nimport AppDisplay from \"./AppDisplay\";\r\nimport {Container, Row, Col } from 'react-bootstrap';\r\n\r\nexport default class Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ac: \"AC\",\r\n      display: \"0\",\r\n      expression: \"\",\r\n    };\r\n  }\r\n\r\n  // Add comma into display\r\n  numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n  removeComma(x) {\r\n    return x.toString().replace(/,/gi,\"\");\r\n  }\r\n\r\n  handleClick = (ev) => {\r\n\r\n    if (ev.target.value ===\"+\" || ev.target.value ===\"-\" || ev.target.value ===\"x\" || ev.target.value ===\"/\" ) {\r\n        this.setState({\r\n          display:\r\n            this.state.display === \"0\"\r\n              ? \"0\"\r\n              : this.state.display + ev.target.value,\r\n          ac: this.state.display === \"0\" ? \"AC\" : \"C\",\r\n        })\r\n    }\r\n    else if (ev.target.value === \"+/-\"){\r\n        this.setState({\r\n            display: this.state.display[0] === \"-\" ? this.state.display.slice(1,) : \"-\".concat(this.state.display),\r\n        })\r\n    }\r\n    else if (ev.target.value === \"%\") {\r\n      this.setState({\r\n        display: evaluate(`(${this.state.display})/100`),\r\n      });\r\n    } else {\r\n      this.setState({\r\n        display:\r\n          this.state.display === \"0\"\r\n            ? ev.target.value\r\n            : this.state.display + ev.target.value,\r\n        ac: this.state.display === \"0\" ? \"AC\" : \"C\",\r\n      });\r\n    }\r\n  };\r\n\r\n  allClear = (ev) => {\r\n    this.setState({\r\n      display: \"0\",\r\n      ac: \"AC\",\r\n    });\r\n  };\r\n\r\n  equal = (ev) => {\r\n    // Regular expression\r\n    let string = this.state.display.replace(/X/gi, \"*\");\r\n    this.setState({\r\n      display: evaluate(string),\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <Container className=\"body\">\r\n          <Row className=\"flex-row-reverse display\">\r\n            <AppDisplay display={this.state.display} />\r\n          </Row>\r\n          <Row >\r\n            <Col><AppButton onClick={this.allClear} value={this.state.ac} type=\"outline-success\" /></Col>\r\n            <Col><AppButton onClick={this.handleClick} value={\"+/-\"} type=\"outline-success\" /></Col>\r\n            <Col><AppButton onClick={this.handleClick} value={\"%\"} type=\"outline-success\" /></Col>\r\n            <Col><AppButton onClick={this.handleClick} value={\"/\"} type=\"outline-warning\" /></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col><AppButton onClick={this.handleClick} value={7} type=\"outline-secondary\" /></Col>\r\n            <Col><AppButton onClick={this.handleClick} value={8} type=\"outline-secondary\" /></Col>\r\n            <Col><AppButton onClick={this.handleClick} value={9} type=\"outline-secondary\" /></Col>\r\n            <Col><AppButton onClick={this.handleClick} value={\"x\"} type=\"outline-warning\" /></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col><AppButton onClick={this.handleClick} value={4} type=\"outline-secondary\" /></Col>\r\n            <Col><AppButton onClick={this.handleClick} value={5} type=\"outline-secondary\"/></Col>\r\n            <Col><AppButton onClick={this.handleClick} value={6} type=\"outline-secondary\"/></Col>\r\n            <Col><AppButton onClick={this.handleClick} value={\"-\"} type=\"outline-warning\"/></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col><AppButton onClick={this.handleClick} value={1} type=\"outline-secondary\" /></Col>\r\n            <Col><AppButton onClick={this.handleClick} value={2} type=\"outline-secondary\" /></Col>\r\n            <Col><AppButton onClick={this.handleClick} value={3} type=\"outline-secondary\" /></Col>\r\n            <Col><AppButton onClick={this.handleClick} value={\"+\"} type=\"outline-warning\" /></Col>\r\n          </Row>\r\n          <Row>\r\n            <Col xs={6}><AppButton onClick={this.handleClick} value={\"0\"} type=\"outline-secondary btn-zero\" /></Col>\r\n            <Col xs={3}><AppButton onClick={this.handleClick} value={\".\"} type=\"outline-secondary\" /></Col>\r\n            <Col xs={3}><AppButton onClick={this.equal} value={\"=\"} type=\"outline-warning\" /></Col>\r\n          </Row>\r\n      </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from './components/Main'\n\nexport default function App() {\n\n  return (\n      <Main/>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}