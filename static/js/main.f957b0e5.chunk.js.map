{"version":3,"sources":["components/AppButton.js","components/AppDisplay.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["AppButton","props","classType","type","value","className","onClick","AppDisplay","display","Main","handleClick","ev","target","setState","state","slice","concat","evaluate","ac","allClear","equal","string","replace","expression","Array","fill","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f957b0e5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function AppButton(props) {\r\n    const classType = props.type === \"function\" ? \"btn-function\": (props.type === \"expression\" ? \"btn-expression\" : (props.type === \"number\" && props.value === \"0\" ? \"btn-number btn-zero\" : \"btn-number\"));\r\n    \r\n    return(\r\n      <button className={classType} onClick={props.onClick} value={props.value}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n\r\n}","import React from \"react\";\r\n\r\nexport default function AppDisplay(props) {\r\n  return (\r\n    <>\r\n        {props.display}\r\n    </>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { evaluate } from \"mathjs\";\r\nimport AppButton from \"./AppButton\";\r\nimport AppDisplay from \"./AppDisplay\";\r\n\r\nexport default class Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ac: \"AC\",\r\n      display: \"0\",\r\n      expression: Array(3).fill(null),\r\n    };\r\n  }\r\n\r\n  handleClick = (ev) => {\r\n    /*\r\n    if (ev.target.value ===\"+\" || ev.target.value ===\"-\" || ev.target.value ===\"x\" || ev.target.value ===\"/\" ) {\r\n        this.setState({\r\n            previousValue: this.state.previousValue.concat(ev.target.value),\r\n            display: evaluate(`${this.state.previousValue}`)\r\n        })\r\n    }\r\n    else \r\n    */\r\n    if (ev.target.value === \"+/-\"){\r\n        this.setState({\r\n            display: this.state.display[0] === \"-\" ? this.state.display.slice(1,) : \"-\".concat(this.state.display),\r\n        })\r\n    }\r\n    else if (ev.target.value === \"%\") {\r\n      this.setState({\r\n        display: evaluate(`(${this.state.display})/100`),\r\n      });\r\n    } else {\r\n      this.setState({\r\n        display:\r\n          this.state.display === \"0\"\r\n            ? ev.target.value\r\n            : this.state.display + ev.target.value,\r\n        ac: \"C\",\r\n      });\r\n    }\r\n  };\r\n\r\n  allClear = (ev) => {\r\n    this.setState({\r\n      display: \"0\",\r\n      ac: \"AC\",\r\n    });\r\n  };\r\n\r\n  equal = (ev) => {\r\n    // Regular expression\r\n    let string = this.state.display.replace(/X/gi, \"*\");\r\n    this.setState({\r\n      display: evaluate(string),\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"body\">\r\n        <div className=\"row display\">\r\n          <AppDisplay display={this.state.display} />\r\n        </div>\r\n        <div className=\"row\">\r\n          <AppButton onClick={this.allClear} value={this.state.ac} type=\"function\" />\r\n          <AppButton onClick={this.handleClick} value={\"+/-\"} type=\"function\" />\r\n          <AppButton onClick={this.handleClick} value={\"%\"} type=\"function\" />\r\n          <AppButton onClick={this.handleClick} value={\"/\"} type=\"expression\" />\r\n        </div>\r\n        <div className=\"row\">\r\n          <AppButton onClick={this.handleClick} value={7} type=\"number\" />\r\n          <AppButton onClick={this.handleClick} value={8} type=\"number\" />\r\n          <AppButton onClick={this.handleClick} value={9} type=\"number\" />\r\n          <AppButton onClick={this.handleClick} value={\"x\"} type=\"expression\" />\r\n        </div>\r\n        <div className=\"row\">\r\n          <AppButton onClick={this.handleClick} value={4} type=\"number\" />\r\n          <AppButton onClick={this.handleClick} value={5} type=\"number\" />\r\n          <AppButton onClick={this.handleClick} value={6} type=\"number\" />\r\n          <AppButton onClick={this.handleClick} value={\"-\"} type=\"expression\" />\r\n        </div>\r\n        <div className=\"row\">\r\n          <AppButton onClick={this.handleClick} value={1} type=\"number\" />\r\n          <AppButton onClick={this.handleClick} value={2} type=\"number\" />\r\n          <AppButton onClick={this.handleClick} value={3} type=\"number\" />\r\n          <AppButton onClick={this.handleClick} value={\"+\"} type=\"expression\" />\r\n        </div>\r\n        <div className=\"row\">\r\n          <AppButton onClick={this.handleClick} value={\"0\"} type=\"number\" />\r\n          <AppButton onClick={this.handleClick} value={\".\"} type=\"number\" />\r\n          <AppButton onClick={this.equal} value={\"=\"} type=\"expression\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from './components/Main'\n\nexport default function App() {\n\n  return (\n    <div className=\"container\">\n      <Main/>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}